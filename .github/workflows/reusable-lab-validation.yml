name: Lab Validation (reusable)

on:
  workflow_call:
    inputs:
      batfish_ref:
        description: "Git ref for Batfish version to test"
        required: false
        default: "master"
        type: string
      batfish_docker:
        description: "Docker image for Batfish (e.g., batfish/batfish:2024.12.20.1234)"
        required: false
        type: string
      pybatfish_ref:
        description: "Git ref for Pybatfish version to test"
        required: false
        default: "master"
        type: string
      pybatfish_version:
        description: "PyPI version for Pybatfish (e.g., 2025.7.7.2423)"
        required: false
        type: string
      pybatfish_pypi_repo:
        description: "PyPI repository (test or prod)"
        required: false
        default: "prod"
        type: string
      lab_filter:
        description: "Optional lab filter pattern (e.g., 'eos_*')"
        required: false
        type: string

jobs:
  # First job to discover available labs
  discover-labs:
    runs-on: ubuntu-latest
    outputs:
      labs: ${{ steps.discover.outputs.labs }}
    steps:
    - name: Checkout lab-validation
      uses: actions/checkout@v4

    - name: Discover available labs
      id: discover
      run: |
        if [ "${{ inputs.lab_filter }}" != "" ]; then
          # Apply filter pattern
          labs=$(ls -1 snapshots/ | grep -E "${{ inputs.lab_filter }}" | jq -R -s -c 'split("\n")[:-1]')
        else
          # Find all directories in snapshots/
          labs=$(ls -1 snapshots/ | jq -R -s -c 'split("\n")[:-1]')
        fi
        echo "labs=$labs" >> $GITHUB_OUTPUT
        echo "Discovered labs: $labs"

  # Build Batfish JAR once and cache it (only if not using Docker)
  build-batfish:
    runs-on: ubuntu-latest
    if: inputs.batfish_docker == ''
    steps:
    - name: Checkout Batfish
      uses: actions/checkout@v4
      with:
        repository: batfish/batfish
        path: batfish
        ref: ${{ inputs.batfish_ref || 'master' }}

    - name: Set up Java 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Cache Bazel
      uses: actions/cache@v3
      with:
        path: ~/.cache/bazel
        key: ${{ runner.os }}-bazel-17-${{ hashFiles('batfish/.bazelversion', 'batfish/WORKSPACE', 'batfish/maven_install.json') }}-${{ github.run_id }}
        restore-keys: |
          ${{ runner.os }}-bazel-17-${{ hashFiles('batfish/.bazelversion', 'batfish/WORKSPACE', 'batfish/maven_install.json') }}-

    - name: Build Batfish JAR and questions
      working-directory: batfish
      run: |
        bazel build //projects/allinone:allinone_main_deploy.jar
        cp bazel-bin/projects/allinone/allinone_main_deploy.jar allinone.jar
        # Create questions archive following pybatfish pattern
        tar -czf questions.tgz questions/

    - name: Upload Batfish artifacts
      uses: actions/upload-artifact@v4
      with:
        name: batfish-artifacts
        path: |
          batfish/allinone.jar
          batfish/questions.tgz
        retention-days: 1

  # Matrix job to run each lab in parallel
  lab-integration-test:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [discover-labs, build-batfish]
    if: always() # Run even if build-batfish was skipped (for Docker mode)
    strategy:
      matrix:
        lab: ${{ fromJson(needs.discover-labs.outputs.labs) }}
      fail-fast: false  # Don't cancel other jobs if one fails

    steps:
    - name: Checkout lab-validation
      uses: actions/checkout@v4
      with:
        path: lab-validation

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
        cache: 'pip'
        cache-dependency-path: 'requirements*.txt'

    - name: Set up Java 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Download Batfish artifacts
      if: inputs.batfish_docker == ''
      uses: actions/download-artifact@v4
      with:
        name: batfish-artifacts
        path: .

    - name: Install lab-validation dependencies
      working-directory: lab-validation
      run: |
        python -m pip install --upgrade pip

        # Install base dependencies from requirements.txt
        pip install -r requirements.txt

        # Install Pybatfish based on input parameters (may override version from requirements.txt)
        if [ "${{ inputs.pybatfish_version }}" != "" ]; then
          if [ "${{ inputs.pybatfish_pypi_repo }}" = "test" ]; then
            pip install -i https://test.pypi.org/simple --extra-index-url https://pypi.org/simple pybatfish==${{ inputs.pybatfish_version }}
          else
            pip install pybatfish==${{ inputs.pybatfish_version }}
          fi
        else
          # Default: install from git ref (override requirements.txt version)
          PYBF_REF="${{ inputs.pybatfish_ref || 'master' }}"
          pip install git+https://github.com/batfish/pybatfish.git@${PYBF_REF}
        fi

        pip install -r requirements-dev.txt
        pip install -e .

    - name: Start Batfish service
      run: |
        if [ "${{ inputs.batfish_docker }}" != "" ]; then
          # Start Batfish using Docker container
          docker run -d --name batfish \
            -p 9996:9996 \
            ${{ inputs.batfish_docker }}

          # Wait for service to start
          sleep 15
        else
          # Extract questions archive and start from JAR
          tar -xzf questions.tgz

          # Start Batfish using simple allinone mode (like pybatfish CI)
          coordinator_args=(\
            -templatedirs=questions \
            -periodassignworkms=5 \
          )
          allinone_args=(\
            -runclient=false \
            -coordinatorargs="$(echo -n "${coordinator_args[@]}")" \
          )
          java -cp allinone.jar org.batfish.allinone.Main "${allinone_args[@]}" > batfish.log 2>&1 &

          # Wait for service to start
          sleep 10
        fi

    - name: Run lab integration test - ${{ matrix.lab }}
      working-directory: lab-validation
      run: |
        python -m pytest lab_tests/test_labs.py -v --tb=short --labname=${{ matrix.lab }}

    - name: Show Batfish logs on failure
      if: failure()
      run: |
        echo "=== Batfish logs ==="
        if [ "${{ inputs.batfish_docker }}" != "" ]; then
          # Save docker logs to batfish.log for consistency, then display
          docker logs batfish > batfish.log 2>&1 || echo "No Docker container logs found"
          tail -100 batfish.log || echo "No batfish log found"
        else
          tail -100 batfish.log || echo "No batfish log found"
        fi

  # Summary job for required status checks
  all-labs-passed:
    runs-on: ubuntu-latest
    needs: [lab-integration-test]
    if: always()  # Run even if some lab tests failed

    steps:
    - name: Check all lab tests passed
      run: |
        if [ "${{ needs.lab-integration-test.result }}" != "success" ]; then
          echo "❌ Some lab integration tests failed"
          exit 1
        else
          echo "✅ All lab integration tests passed"
        fi
