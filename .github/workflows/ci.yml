name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
        cache: 'pip'
        cache-dependency-path: '.pre-commit-config.yaml'

    - name: Run pre-commit hooks
      uses: pre-commit/action@v3.0.1

  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
        cache: 'pip'
        cache-dependency-path: 'requirements*.txt'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install -e .

    - name: Run tests with coverage
      run: |
        pytest tests/ -v --tb=short --cov=lab_validation --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Test package build
      run: |
        python -m build
        pip install dist/*.whl
        python -c "import lab_validation; print('Package imports successfully')"

  # First job to discover available labs
  discover-labs:
    runs-on: ubuntu-latest
    outputs:
      labs: ${{ steps.discover.outputs.labs }}
    steps:
    - name: Checkout lab-validation
      uses: actions/checkout@v4

    - name: Discover available labs
      id: discover
      run: |
        # Find all directories in snapshots/ and create JSON array
        labs=$(ls -1 snapshots/ | jq -R -s -c 'split("\n")[:-1]')
        echo "labs=$labs" >> $GITHUB_OUTPUT
        echo "Discovered labs: $labs"

  # Build Batfish JAR once and cache it
  build-batfish:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Batfish
      uses: actions/checkout@v4
      with:
        repository: batfish/batfish
        path: batfish
        ref: master

    - name: Set up Java 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Cache Bazel
      uses: actions/cache@v3
      with:
        path: ~/.cache/bazel
        key: ${{ runner.os }}-bazel-17-${{ hashFiles('batfish/.bazelversion', 'batfish/WORKSPACE', 'batfish/maven_install.json') }}-${{ github.run_id }}
        restore-keys: |
          ${{ runner.os }}-bazel-17-${{ hashFiles('batfish/.bazelversion', 'batfish/WORKSPACE', 'batfish/maven_install.json') }}-

    - name: Build Batfish JAR and questions
      working-directory: batfish
      run: |
        bazel build //projects/allinone:allinone_main_deploy.jar
        cp bazel-bin/projects/allinone/allinone_main_deploy.jar allinone.jar
        # Create questions archive following pybatfish pattern
        tar -czf questions.tgz questions/

    - name: Upload Batfish artifacts
      uses: actions/upload-artifact@v4
      with:
        name: batfish-artifacts
        path: |
          batfish/allinone.jar
          batfish/questions.tgz
        retention-days: 1

  # Matrix job to run each lab in parallel
  lab-integration-test:
    runs-on: ubuntu-latest
    timeout-minutes: 20  # Reduced since we don't build JAR
    needs: [discover-labs, build-batfish]
    strategy:
      matrix:
        lab: ${{ fromJson(needs.discover-labs.outputs.labs) }}
      fail-fast: false  # Don't cancel other jobs if one fails

    steps:
    - name: Checkout lab-validation
      uses: actions/checkout@v4
      with:
        path: lab-validation

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
        cache: 'pip'
        cache-dependency-path: 'requirements*.txt'

    - name: Set up Java 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Download Batfish artifacts
      uses: actions/download-artifact@v4
      with:
        name: batfish-artifacts
        path: .

    - name: Install lab-validation dependencies
      working-directory: lab-validation
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install -e .

    - name: Start Batfish service
      run: |
        # Extract questions archive
        tar -xzf questions.tgz

        # Start Batfish using simple allinone mode (like pybatfish CI)
        coordinator_args=(\
          -templatedirs=questions \
          -periodassignworkms=5 \
        )
        allinone_args=(\
          -runclient=false \
          -coordinatorargs="$(echo -n "${coordinator_args[@]}")" \
        )
        java -cp allinone.jar org.batfish.allinone.Main "${allinone_args[@]}" > batfish.log 2>&1 &

        # Wait for service to start
        sleep 10

    - name: Run lab integration test - ${{ matrix.lab }}
      working-directory: lab-validation
      run: |
        python -m pytest lab_tests/test_labs.py -v --tb=short --labname=${{ matrix.lab }}

    - name: Show Batfish logs on failure
      if: failure()
      run: |
        echo "=== Batfish logs ==="
        tail -100 batfish.log || echo "No batfish log found"

  # Summary job for required status checks
  all-labs-passed:
    runs-on: ubuntu-latest
    needs: [lab-integration-test]
    if: always()  # Run even if some lab tests failed

    steps:
    - name: Check all lab tests passed
      run: |
        if [ "${{ needs.lab-integration-test.result }}" != "success" ]; then
          echo "❌ Some lab integration tests failed"
          exit 1
        else
          echo "✅ All lab integration tests passed"
        fi
